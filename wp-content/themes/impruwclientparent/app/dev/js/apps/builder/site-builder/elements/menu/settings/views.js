// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'text!apps/builder/site-builder/elements/menu/settings/templates/settings.html'], function(App, settingsTpl) {
    return App.module('SiteBuilderApp.Element.Menu.Settings.Views', function(Views, App, Backbone, Marionette, $, _) {
      var _ref;
      return Views.SettingsView = (function(_super) {
        __extends(SettingsView, _super);

        function SettingsView() {
          this.updateStyle = __bind(this.updateStyle, this);
          _ref = SettingsView.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        SettingsView.prototype.template = settingsTpl;

        SettingsView.prototype.className = 'modal-content settings-box';

        SettingsView.prototype.serializeData = function() {
          var config, data, modelData;
          data = {};
          config = this.options.config.toJSON();
          modelData = this.model.toJSON();
          data = {
            config: config,
            model: modelData
          };
          return data;
        };

        SettingsView.prototype.onRender = function() {
          this.$el.find('input[type="checkbox"]').checkbox();
          this.$el.find('input[type="radio"]').radio();
          return this.setFields();
        };

        SettingsView.prototype.setFields = function() {
          if (this.model.get('draggable') === true) {
            this.$el.find('input[name="draggable"]').checkbox('check');
          }
          if (this.model.get('justified') === true) {
            this.$el.find('input[name="justified"]').checkbox('check');
          }
          this.$el.find('select[name="style"]').val(this.model.get('style'));
          return this.$el.find('select[name="choose-menu"]').val(this.model.get('menu_id'));
        };

        SettingsView.prototype.events = {
          'click .close-settings': function(evt) {
            evt.preventDefault();
            return App.settingsRegion.close();
          },
          'change select[name="style"]': 'updateStyle',
          'change select[name="choose-menu"]': function(evt) {
            return this.trigger("element:menu:changed", $(evt.target).val());
          },
          'change input[name="draggable"]': 'setDraggable',
          'change input[name="justified"]': 'setJustified'
        };

        SettingsView.prototype.updateStyle = function(evt) {
          var newStyle;
          newStyle = $(evt.target).val();
          return this.trigger("element:style:changed", newStyle);
        };

        SettingsView.prototype.alignElement = function(evt) {
          var align;
          align = $(evt.target).val();
          return this.trigger("element:alignment:changed", align);
        };

        SettingsView.prototype.setJustified = function(evt) {
          var align;
          align = $(evt.target).is(':checked');
          return this.trigger("element:justified:changed", align);
        };

        SettingsView.prototype.setDraggable = function(evt) {
          var draggable;
          draggable = $(evt.target).is(':checked');
          return this.trigger("element:draggable:changed", draggable);
        };

        return SettingsView;

      })(Marionette.ItemView);
    });
  });

}).call(this);
