// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'apps/builder/site-builder/elements/row/views', 'apps/builder/site-builder/elements/row/settings/controller'], function(App) {
    return App.module('SiteBuilderApp.Element.Row', function(Row, App, Backbone, Marionette, $, _) {
      var _ref;
      return Row.Controller = (function(_super) {
        __extends(Controller, _super);

        function Controller() {
          this.showView = __bind(this.showView, this);
          this.setDraggable = __bind(this.setDraggable, this);
          _ref = Controller.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Controller.prototype.initialize = function(options) {
          _.defaults(options.modelData, {
            draggable: true,
            style: '',
            columncount: 2
          });
          Controller.__super__.initialize.call(this, options);
          this.bindEvents();
          this.showView();
          return this.addPropertiesField();
        };

        Controller.prototype.bindEvents = function() {
          this.listenTo(this.layout.model, "change:style", this.changeStyle);
          this.listenTo(this.layout.model, "change:draggable", this.setDraggable);
          return this.listenTo(this.layout.model, "change:columncount", this.columnCountChanged);
        };

        Controller.prototype.addPropertiesField = function() {
          this.layout.$el.children('form').append('<input type="hidden" name="draggable" value=""/>');
          this.layout.$el.children('form').append('<input type="hidden" name="style" value=""/>');
          this.setDraggable(this.layout.model);
          return this.changeStyle(this.layout.model);
        };

        Controller.prototype._getRowView = function() {
          return new Row.Views.RowView({
            model: this.layout.model
          });
        };

        Controller.prototype.setDraggable = function(model) {
          this.layout.triggerMethod("set:draggable", model.get('draggable'));
          return this.layout.$el.children('form').find('input[name="draggable"]').val(model.get('draggable'));
        };

        Controller.prototype.columnCountChanged = function(model) {
          return this.layout.elementRegion.currentView.triggerMethod("column:count:changed", model.get('columncount'));
        };

        Controller.prototype.changeStyle = function(model) {
          var _ref1;
          this.layout.elementRegion.currentView.triggerMethod("style:change", model.get('style'), (_ref1 = model.previousAttributes().style) != null ? _ref1 : '');
          return this.layout.$el.children('form').find('input[name="style"]').val(model.get('style'));
        };

        Controller.prototype.showView = function() {
          var view;
          this.removeSpinner();
          view = this._getRowView();
          return this.layout.elementRegion.show(view);
        };

        Controller.prototype.deleteElement = function(model) {
          if (!this.layout.elementRegion.currentView.$el.canBeDeleted()) {
            return alert("Please remove elements inside row and then delete.");
          } else {
            return model.destroy();
          }
        };

        return Controller;

      })(App.SiteBuilderApp.Element.Controller);
    });
  });

}).call(this);
