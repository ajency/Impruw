// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'apps/builder/site-builder/elements/row/views', 'apps/builder/site-builder/elements/row/settings/controller'], function(App) {
    return App.module('SiteBuilderApp.Element.Row', function(Row, App, Backbone, Marionette, $, _) {
      var _ref;
      return Row.Controller = (function(_super) {
        __extends(Controller, _super);

        function Controller() {
          this.showView = __bind(this.showView, this);
          this.setDraggable = __bind(this.setDraggable, this);
          _ref = Controller.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Controller.prototype.initialize = function(options) {
          if (options == null) {
            options = {};
          }
          Controller.__super__.initialize.call(this, options);
          this.bindEvents();
          return this.showView();
        };

        Controller.prototype.bindEvents = function() {
          this.listenTo(this.view.model, "change:style", this.changeStyle);
          return this.listenTo(this.view.model, "change:draggable", this.setDraggable);
        };

        Controller.prototype._getRowView = function() {
          return new Row.Views.RowView;
        };

        Controller.prototype.setDraggable = function(model) {
          return this.view.triggerMethod("set:draggable", model.get('draggable'));
        };

        Controller.prototype.changeStyle = function(model) {
          return this.view.triggerMethod("set:style", model.get('style'));
        };

        Controller.prototype.showView = function() {
          var view;
          view = this._getRowView();
          return this.view.elementRegion.show(view);
        };

        return Controller;

      })(App.SiteBuilderApp.Element.Controller);
    });
  });

}).call(this);
