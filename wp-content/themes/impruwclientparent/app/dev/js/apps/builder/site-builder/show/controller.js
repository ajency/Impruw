// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'controllers/base-controller', 'apps/builder/site-builder/show/views'], function(App, AppController) {
    App.module('SiteBuilderApp.Show', function(Show, App, Backbone, Marionette, $, _) {
      var siteBuilderController, _ref, _ref1,
        _this = this;
      siteBuilderController = null;
      Show.BuilderController = (function(_super) {
        __extends(BuilderController, _super);

        function BuilderController() {
          _ref = BuilderController.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        BuilderController.prototype.initialize = function(opt) {
          var elements, pageId,
            _this = this;
          if (opt == null) {
            opt = {};
          }
          this.region = App.getRegion('builderRegion');
          pageId = App.request("get:current:editable:page");
          elements = App.request("get:page:json", pageId);
          this.view = new Show.View.Builder({
            model: elements
          });
          this.listenTo(this.view, "add:new:element", function(container, type) {
            return App.request("add:new:element", container, type);
          });
          this.listenTo(this.view, "dependencies:fetched", function() {
            return _.delay(function() {
              return _this.startFillingElements();
            }, 400);
          });
          return this.show(this.view, {
            loading: true
          });
        };

        BuilderController.prototype._getContainer = function(section) {
          switch (section) {
            case 'header':
              return $('#site-header-region');
            case 'page':
              return $('#site-page-content-region');
            case 'footer':
              return $('#site-footer-region');
          }
        };

        BuilderController.prototype.startFillingElements = function() {
          var container, section,
            _this = this;
          section = this.view.model.get('header');
          container = this._getContainer('header');
          return _.each(section, function(element, i) {
            return App.request("add:new:element", container, element.element, element);
          });
        };

        return BuilderController;

      })(AppController);
      Show.Controller = (function(_super) {
        __extends(Controller, _super);

        function Controller() {
          _ref1 = Controller.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        Controller.prototype.initialize = function(opt) {
          var view,
            _this = this;
          if (opt == null) {
            opt = {};
          }
          this.region = App.getRegion('builderWrapper');
          view = new Show.View.MainView;
          this.listenTo(view, 'render', function(view) {
            return _.delay(function() {
              App.addRegions({
                builderRegion: '#aj-imp-builder-drag-drop'
              });
              return siteBuilderController = new Show.BuilderController();
            }, 400);
          });
          return this.show(view);
        };

        return Controller;

      })(AppController);
      return App.commands.setHandler("editable:page:changed", function(pageId) {
        if (_this.siteBuilderController !== null) {
          siteBuilderController.close();
        }
        return siteBuilderController = new Show.BuilderController();
      });
    });
    return App.SiteBuilderApp.Show.Controller;
  });

}).call(this);
