// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'apps/builder/site-builder/elements/menu/views', 'apps/builder/site-builder/elements/menu/settings/controller'], function(App) {
    return App.module('SiteBuilderApp.Element.Menu', function(Menu, App, Backbone, Marionette, $, _) {
      var _ref;
      return Menu.Controller = (function(_super) {
        __extends(Controller, _super);

        function Controller() {
          this.showView = __bind(this.showView, this);
          _ref = Controller.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Controller.prototype.initialize = function(options) {
          if (options == null) {
            options = {};
          }
          Controller.__super__.initialize.call(this, options);
          return this.listenTo(this.view.model, "change:menu_id", this.showView);
        };

        Controller.prototype._getMenuView = function(model, collection) {
          return new Menu.Views.MenuView({
            model: model,
            collection: collection
          });
        };

        Controller.prototype.showView = function(model) {
          var itemCollection, menu, view;
          menu = App.request("get:collection:model", "menucollection", model.get('menu_id'));
          itemCollection = menu.get('menu_items');
          view = this._getMenuView(menu, itemCollection);
          return this.view.elementRegion.show(view);
        };

        return Controller;

      })(App.SiteBuilderApp.Element.Controller);
    });
  });

}).call(this);
