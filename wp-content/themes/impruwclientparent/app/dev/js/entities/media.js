// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["app", 'backbone'], function(App, Backbone) {
    return App.module("Entities.Media", function(Media, App, Backbone, Marionette, $, _) {
      var API;
      Media.MediaModel = (function(_super) {
        __extends(MediaModel, _super);

        function MediaModel() {
          return MediaModel.__super__.constructor.apply(this, arguments);
        }

        MediaModel.prototype.idAttribute = 'id';

        MediaModel.prototype.parse = function(resp) {
          if (resp.code === 'OK') {
            return resp.data;
          }
          return resp;
        };

        return MediaModel;

      })(Backbone.AssociatedModel);
      Media.MediaCollection = (function(_super) {
        __extends(MediaCollection, _super);

        function MediaCollection() {
          return MediaCollection.__super__.constructor.apply(this, arguments);
        }

        MediaCollection.prototype.filters = {
          order: 'DESC',
          orderby: 'date',
          paged: 1,
          posts_per_page: 40
        };

        MediaCollection.prototype.model = Media.MediaModel;

        MediaCollection.prototype.parse = function(resp) {
          if (resp.code === 'OK') {
            return resp.data;
          }
          return resp;
        };

        return MediaCollection;

      })(Backbone.Collection);
      API = {
        fetchMedia: function(params, reset) {
          var mediaCollection;
          if (params == null) {
            params = {};
          }
          mediaCollection = App.request("get:collection", 'mediacollection');
          if (!mediaCollection) {
            mediaCollection = new Media.MediaCollection;
          }
          mediaCollection.url = "" + AJAXURL + "?action=query_attachments";
          _.defaults(params, mediaCollection.filters);
          mediaCollection.fetch({
            reset: reset,
            data: params
          });
          return mediaCollection;
        },
        createStoreCollection: function() {
          var mediaCollection;
          mediaCollection = new Media.MediaCollection;
          return App.request("set:collection", 'mediacollection', mediaCollection);
        },
        getMediaById: function(mediaId) {
          var media, mediaCollection;
          if (0 === parseInt(mediaId)) {
            return API.getPlaceHolderMedia();
          }
          mediaCollection = App.request("get:collection", 'mediacollection');
          media = mediaCollection.get(parseInt(mediaId));
          if (_.isUndefined(media)) {
            media = new Media.MediaModel({
              ID: mediaId
            });
            media.url = "" + AJAXURL + "?action=get-media&ID=" + mediaId;
            mediaCollection.add(media);
            media.fetch();
          }
          return media;
        },
        getPlaceHolderMedia: function() {
          var media;
          media = new Media.MediaModel;
          media.set({
            url: "" + SITEURL + "/wp-content/themes/impruwclientparent/app/dev/js/plugins/holder.js/99%x200",
            title: 'Placeholder'
          });
          return media;
        },
        createNewMedia: function(data) {
          var media, mediaCollection;
          media = new Media.MediaModel(data);
          mediaCollection = App.request("get:collection", 'mediacollection');
          return mediaCollection.add(media);
        }
      };
      App.commands.setHandler("create:media:store", function() {
        return API.createStoreCollection();
      });
      App.reqres.setHandler("fetch:media", function(shouldReset) {
        if (shouldReset == null) {
          shouldReset = true;
        }
        return API.fetchMedia(shouldReset);
      });
      App.reqres.setHandler("get:media:by:id", function(mediaId) {
        return API.getMediaById(mediaId);
      });
      return App.commands.setHandler("new:media:added", function(modelData) {
        return API.createNewMedia(modelData);
      });
    });
  });

}).call(this);
