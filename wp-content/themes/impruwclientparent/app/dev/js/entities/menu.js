// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["app", 'backbone'], function(App, Backbone) {
    App.module("Entities.Menus", function(Menus, App, Backbone, Marionette, $, _) {
      var API, _ref, _ref1, _ref2, _ref3;
      Menus.MenuItemModel = (function(_super) {
        __extends(MenuItemModel, _super);

        function MenuItemModel() {
          _ref = MenuItemModel.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        MenuItemModel.prototype.defaults = {
          post_title: '',
          menu_item_link: '',
          menu_item_parent: 0
        };

        return MenuItemModel;

      })(Backbone.Model);
      Menus.MenuItemCollection = (function(_super) {
        __extends(MenuItemCollection, _super);

        function MenuItemCollection() {
          _ref1 = MenuItemCollection.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        MenuItemCollection.prototype.model = Menus.MenuItemModel;

        MenuItemCollection.prototype.comparator = 'order';

        return MenuItemCollection;

      })(Backbone.Collection);
      Menus.MenuModel = (function(_super) {
        __extends(MenuModel, _super);

        function MenuModel() {
          _ref2 = MenuModel.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        MenuModel.prototype.defaults = {
          menu_name: '',
          menu_description: '',
          menu_items: new Menus.MenuItemCollection
        };

        return MenuModel;

      })(Backbone.Model);
      Menus.MenuCollection = (function(_super) {
        __extends(MenuCollection, _super);

        function MenuCollection() {
          _ref3 = MenuCollection.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        MenuCollection.prototype.model = Menus.MenuModel;

        return MenuCollection;

      })(Backbone.Collection);
      API = {
        getMenus: function(param) {
          var menus;
          if (param == null) {
            param = {};
          }
          menus = new Menus.MenuCollection;
          menus.url = AJAXURL + '?action=get-menus';
          menus.fetch({
            reset: true,
            data: param
          });
          return menus;
        },
        getMenuItems: function(menuId) {
          var menuItems;
          if (menuId == null) {
            menuId = 0;
          }
          menuItems = new Menus.MenuItemCollection;
          menuItems.url = "" + AJAXURL + "?action=get-menu-items";
          menuItems.fetch({
            reset: true,
            data: {
              menu_id: menuId
            }
          });
          return menuItems;
        },
        createMenuItemsCollection: function(items) {
          if (!_.isArray(items)) {
            items = [];
          }
          return new Menus.MenuItemCollection(items);
        },
        createMenuModel: function(menu) {
          if (menu == null) {
            menu = {};
          }
          if (!menu.id) {
            throw new Error("no menu");
          }
          return new Menus.MenuModel(menu);
        }
      };
      App.reqres.setHandler("get:site:menus", function() {
        return API.getMenus();
      });
      App.reqres.setHandler("get:menu:menuitems", function(menuId) {
        return API.getMenuItems(menuId);
      });
      App.reqres.setHandler("create:menuitem:collection", function(items) {
        return API.createMenuItemsCollection(items);
      });
      return App.reqres.setHandler("create:menu:model", function(menu) {
        return API.createMenuModel(menu);
      });
    });
    return App.Entities.Menus;
  });

}).call(this);
